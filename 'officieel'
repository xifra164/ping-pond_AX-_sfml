#include <windows.h> 
#include <SFML/Audio.hpp> 
#include <SFML/Graphics.hpp>
using namespace sf;

int main() {
    //opzetten van game componenten 
    // maken van een scherm
    const int FPS = 60;
    RenderWindow window(VideoMode({ 640, 480 }), "Ping pong!");
    float windowHeight = 480;
	float windowWidth = 640;
    

        //maken van de paddles
    RectangleShape paddle1(Vector2f(25, 120));
    RectangleShape paddle2(Vector2f(25, 120));
    paddle1.setFillColor(Color::Red);
    paddle2.setFillColor(Color::Red);
    paddle1.setPosition(Vector2f(10, 340));
    paddle2.setPosition(Vector2f(605, 340));
    float paddle1snelheid = 5.0;
    float paddle2snelheid = 5.0;
	

    float cpu = 0.0f;

    //maken van een ping-pong bal
    CircleShape bal(20);
    bal.setFillColor(Color::Yellow);
    bal.setPosition(Vector2f(315, 235));
    float balsnelheidx = -0.3f;
    float balsnelheidy = 0.3f;
    int ballRadius = 20;

        //game loop 
    
    while (window.isOpen())
    {
        while (const std::optional event = window.pollEvent())
        {
            if (event->is<::Event::Closed>())
                window.close();
        }


        // --- Ball Movement ---
        bal.move(sf::Vector2f(balsnelheidx, balsnelheidy));

        // --- Ball Collision with Walls ---
        // Top wall collision
        if (bal.getPosition().y <= 0) {
            balsnelheidy *= -1; // Reverse vertical direction
            bal.setPosition(sf::Vector2f(bal.getPosition().x, 0));
        }

        // Bottom wall collision
        //rechterkant
        if (bal.getPosition().y + (bal.getRadius() * 2) >= window.getSize().y) {
            balsnelheidy *= -1; // Reverse vertical direction
            bal.setPosition(sf::Vector2f(bal.getPosition().x, window.getSize().y - (bal.getRadius() * 2)));
        }


        // --- Bal Botsing met ZIJ-MUREN
        // Als de bal de linkerkant passeert 
        if (bal.getPosition().x <= 0) {
            balsnelheidx *= -1;
            bal.setPosition(sf::Vector2f(window.getSize().x / 2 - bal.getRadius(), window.getSize().y / 2 - bal.getRadius())); // Reset bal naar midden


        }

        if (bal.getPosition().x + (bal.getRadius() * 2) >= window.getSize().x) {
            balsnelheidx *= -1; // Keer de horizontale richting om bij reset (zodat hij naar speler 2 beweegt)
            bal.setPosition(sf::Vector2f(window.getSize().x / 2 - bal.getRadius(), window.getSize().y / 2 - bal.getRadius())); // Reset bal naar midden


        }
        //paddle 1 beweging//
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::W)) {
            if (paddle1.getPosition().y > 0)
                paddle1.move((sf::Vector2f(0, -paddle1snelheid))); // Paddle 2 beweegt naar boven
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::S)) {
            if (paddle1.getPosition().y + paddle1.getSize().y < windowHeight)
                paddle1.move((sf::Vector2f(0, paddle1snelheid))); // Paddle 1 beweegt naar beneden	
        }

        //Paddle 2 (Up/Down)
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Up)) {
            if (paddle2.getPosition().y > 0)
                paddle2.move((sf::Vector2f(0, -paddle2snelheid)));
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Down)) {
            if (paddle2.getPosition().y + paddle2.getSize().y < windowHeight)
                paddle2.move((sf::Vector2f(0, paddle2snelheid)));
        }
        paddle2.move((sf::Vector2f(cpu, balsnelheidy)));

        // Check collision with all paddles
        FloatRect ballBounds = bal.getGlobalBounds();
        FloatRect paddle1Bounds = paddle1.getGlobalBounds();
        FloatRect paddle2Bounds = paddle2.getGlobalBounds();
		

        if (ballBounds.findIntersection(paddle1Bounds)) {
            // Only bounce if moving toward paddle1
            if (balsnelheidx < 0) {
                balsnelheidx *= -1;

                // Adjust ball position to prevent sticking
                bal.setPosition(sf::Vector2f(paddle1.getPosition().x + paddle1.getSize().x + 1, bal.getPosition().y));

                // Add vertical direction based on where ball hits paddle
                float hitPosition = (bal.getPosition().y + bal.getRadius() - paddle1.getPosition().y) / paddle1.getSize().y;
                balsnelheidy = 8 * (hitPosition - 0.5f); // -4 to +4 range
            }
        }

        if (ballBounds.findIntersection(paddle2Bounds)) {
            // Only bounce if moving toward paddle2
            if (balsnelheidx > 0) {
                balsnelheidx *= -1;

                // Adjust ball position to prevent sticking
                bal.setPosition(Vector2f(paddle2.getPosition().x - ballBounds.witdh - 1, bal.getPosition().y));

                // Add vertical direction based on where ball hits paddle
                float hitPosition = (bal.getPosition().y + ballRadius - paddle2.getPosition().y) / paddle2.getSize().y;
                balsnelheidy = 8 * (hitPosition - 0.5f); // -4 to +4 range
            }
        }

        // Initialize scores and winning condition
        int player1_score = 0;
        int player2_score = 0;
        const int winning_score = 2;
        bool game_over = false;
        int winner = 0; // 0 = no winner, 1 = player1, 2 = player2

        // Create font and text for messages
        Font font;
        if (!font.openFromFile ("arial.ttf")) {
            // Handle font loading error
            return EXIT_FAILURE;
        }

       sf::Text winText(font);
        winText.setFont(font);
        winText.setCharacterSize(60);
        winText.setFillColor(Color::White);
        winText.setStyle(Text::Bold);

        Text scoreText(font);
        scoreText.setFont(font);
        scoreText.setCharacterSize(40);
        scoreText.setFillColor(Color::White);


        // ... [inside game loop after collision detection] ...

        // Add scoring
        if (ballBounds.left <= 0) {
            // Player 2 scores (right paddle)
            player2_score++;

            // Reset ball with random direction
            bal.setPosition(Vector2f(windowWidth / 2 - ballRadius, windowHeight / 2 - ballRadius));
            balsnelheidx = 4;
            balsnelheidy = (rand() % 7) - 3; // Random angle between -3 to +3

            // Check for winner
            if (player2_score >= winning_score) {
                game_over = true;
                winner = 2;
            }
        }
        else if (ballBounds.left + ballBounds.width >= windowWidth) {
            // Player 1 scores (left paddle)
            player1_score++;

            // Reset ball with random direction
            bal.setPosition(sf::Vector2f(windowWidth / 2 - ballRadius, windowHeight / 2 - ballRadius));
            balsnelheidx = -4;
            balsnelheidy = (rand() % 7) - 3; // Random angle between -3 to +3

            // Check for winner
            if (player1_score >= winning_score) {
                game_over = true;
                winner = 1;
            }
        }
        // Restart game on space press
        if (Keyboard::isKeyPressed(Keyboard::Key::Space)) {
            player1_score = 0;
            player2_score = 0;
            game_over = false;
            bal.setPosition(sf::Vector2f(windowWidth / 2 - ballRadius, windowHeight / 2 - ballRadius));
            balsnelheidx = (rand() % 2 == 0) ? -4 : 4;
            balsnelheidy = (rand() % 7) - 3;
        }
        {
            //clear scherm
            window.clear();

            /*tekeningen maken van bal,paddles,achtergrond en scores*/
            window.draw(paddle1);
            window.draw(paddle2);
            window.draw(bal);
            // Draw scores
            scoreText.setString(std::to_string(player1_score) + " - " + std::to_string(player2_score));
            scoreText.setPosition(sf::Vector2f(windowWidth / 2 - scoreText.getLocalBounds().width / 2, 20));
            window.draw(scoreText);

            // Draw win/lose messages
            if (game_over) {
                // Create semi-transparent overlay
                RectangleShape overlay(Vector2f(windowWidth, windowHeight));
                overlay.setFillColor(Color(0, 0, 0, 180));
                window.draw(overlay);

                // Set win/lose message
                if (winner == 1) {
                    winText.setString("Player 1 Wins!\nCongratulations!");
                    winText.setFillColor(Color::Green);
                }
                else {
                    winText.setString("Player 2 Wins!\nBetter luck next time!");
                    winText.setFillColor(Color::Red);
                }

                // Position text in center
                winText.setPosition(sf::Vector2f(
                    windowWidth / 2 - winText.getLocalBounds().width / 2, windowHeight / 2 - winText.getLocalBounds().height));

                window.draw(winText);

            
                // Add restart prompt
                sf::Text restartText(font);
				restartText.setString("Press Space to Restart");
				restartText.setCharacterSize(30);
                restartText.setPosition
               (sf::Vector2f(windowWidth / 2 - restartText.getLocalBounds().width / 2,
                        windowHeight / 2 + 50));


                window.draw(restartText);
            }

            //display wat er is getekend
            window.display();
        }
        return 0;
    }
